// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: basic/v1/basic.proto

package basicV1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/soundphilosopher/basic-grpc-service-go/sdk/basic/service/v1"
	v11 "github.com/soundphilosopher/basic-grpc-service-go/sdk/basic/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BasicServiceName is the fully-qualified name of the BasicService service.
	BasicServiceName = "basic.v1.BasicService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BasicServiceHelloProcedure is the fully-qualified name of the BasicService's Hello RPC.
	BasicServiceHelloProcedure = "/basic.v1.BasicService/Hello"
	// BasicServiceTalkProcedure is the fully-qualified name of the BasicService's Talk RPC.
	BasicServiceTalkProcedure = "/basic.v1.BasicService/Talk"
	// BasicServiceBackgroundProcedure is the fully-qualified name of the BasicService's Background RPC.
	BasicServiceBackgroundProcedure = "/basic.v1.BasicService/Background"
)

// BasicServiceClient is a client for the basic.v1.BasicService service.
type BasicServiceClient interface {
	Hello(context.Context, *connect.Request[v1.HelloRequest]) (*connect.Response[v1.HelloResponse], error)
	Talk(context.Context) *connect.BidiStreamForClient[v1.TalkRequest, v1.TalkResponse]
	Background(context.Context, *connect.Request[v1.BackgroundRequest]) (*connect.ServerStreamForClient[v1.BackgroundResponse], error)
}

// NewBasicServiceClient constructs a client for the basic.v1.BasicService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBasicServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BasicServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	basicServiceMethods := v11.File_basic_v1_basic_proto.Services().ByName("BasicService").Methods()
	return &basicServiceClient{
		hello: connect.NewClient[v1.HelloRequest, v1.HelloResponse](
			httpClient,
			baseURL+BasicServiceHelloProcedure,
			connect.WithSchema(basicServiceMethods.ByName("Hello")),
			connect.WithClientOptions(opts...),
		),
		talk: connect.NewClient[v1.TalkRequest, v1.TalkResponse](
			httpClient,
			baseURL+BasicServiceTalkProcedure,
			connect.WithSchema(basicServiceMethods.ByName("Talk")),
			connect.WithClientOptions(opts...),
		),
		background: connect.NewClient[v1.BackgroundRequest, v1.BackgroundResponse](
			httpClient,
			baseURL+BasicServiceBackgroundProcedure,
			connect.WithSchema(basicServiceMethods.ByName("Background")),
			connect.WithClientOptions(opts...),
		),
	}
}

// basicServiceClient implements BasicServiceClient.
type basicServiceClient struct {
	hello      *connect.Client[v1.HelloRequest, v1.HelloResponse]
	talk       *connect.Client[v1.TalkRequest, v1.TalkResponse]
	background *connect.Client[v1.BackgroundRequest, v1.BackgroundResponse]
}

// Hello calls basic.v1.BasicService.Hello.
func (c *basicServiceClient) Hello(ctx context.Context, req *connect.Request[v1.HelloRequest]) (*connect.Response[v1.HelloResponse], error) {
	return c.hello.CallUnary(ctx, req)
}

// Talk calls basic.v1.BasicService.Talk.
func (c *basicServiceClient) Talk(ctx context.Context) *connect.BidiStreamForClient[v1.TalkRequest, v1.TalkResponse] {
	return c.talk.CallBidiStream(ctx)
}

// Background calls basic.v1.BasicService.Background.
func (c *basicServiceClient) Background(ctx context.Context, req *connect.Request[v1.BackgroundRequest]) (*connect.ServerStreamForClient[v1.BackgroundResponse], error) {
	return c.background.CallServerStream(ctx, req)
}

// BasicServiceHandler is an implementation of the basic.v1.BasicService service.
type BasicServiceHandler interface {
	Hello(context.Context, *connect.Request[v1.HelloRequest]) (*connect.Response[v1.HelloResponse], error)
	Talk(context.Context, *connect.BidiStream[v1.TalkRequest, v1.TalkResponse]) error
	Background(context.Context, *connect.Request[v1.BackgroundRequest], *connect.ServerStream[v1.BackgroundResponse]) error
}

// NewBasicServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBasicServiceHandler(svc BasicServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	basicServiceMethods := v11.File_basic_v1_basic_proto.Services().ByName("BasicService").Methods()
	basicServiceHelloHandler := connect.NewUnaryHandler(
		BasicServiceHelloProcedure,
		svc.Hello,
		connect.WithSchema(basicServiceMethods.ByName("Hello")),
		connect.WithHandlerOptions(opts...),
	)
	basicServiceTalkHandler := connect.NewBidiStreamHandler(
		BasicServiceTalkProcedure,
		svc.Talk,
		connect.WithSchema(basicServiceMethods.ByName("Talk")),
		connect.WithHandlerOptions(opts...),
	)
	basicServiceBackgroundHandler := connect.NewServerStreamHandler(
		BasicServiceBackgroundProcedure,
		svc.Background,
		connect.WithSchema(basicServiceMethods.ByName("Background")),
		connect.WithHandlerOptions(opts...),
	)
	return "/basic.v1.BasicService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BasicServiceHelloProcedure:
			basicServiceHelloHandler.ServeHTTP(w, r)
		case BasicServiceTalkProcedure:
			basicServiceTalkHandler.ServeHTTP(w, r)
		case BasicServiceBackgroundProcedure:
			basicServiceBackgroundHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBasicServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBasicServiceHandler struct{}

func (UnimplementedBasicServiceHandler) Hello(context.Context, *connect.Request[v1.HelloRequest]) (*connect.Response[v1.HelloResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("basic.v1.BasicService.Hello is not implemented"))
}

func (UnimplementedBasicServiceHandler) Talk(context.Context, *connect.BidiStream[v1.TalkRequest, v1.TalkResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("basic.v1.BasicService.Talk is not implemented"))
}

func (UnimplementedBasicServiceHandler) Background(context.Context, *connect.Request[v1.BackgroundRequest], *connect.ServerStream[v1.BackgroundResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("basic.v1.BasicService.Background is not implemented"))
}
